import * as vscode from 'vscode';
import { writeFileSync, readFileSync } from 'fs';
import { recursiveRead } from './utils';
const YAML = require('yaml');

import { RASADeclarationType } from './definitions';
import { setPriority } from 'os';
import { LineCounter } from 'yaml';

let domainData: {[index: string]: any};
let trainingData: {[index: string]: any};

const workspacePath = vscode.workspace.workspaceFolders![0] ?? null;

export function activate(context: vscode.ExtensionContext) {
	let disposable = vscode.commands.registerCommand('rasacode.init', () => {
		vscode.window.showInformationMessage('Initializing RASACode...');
		
		console.log("Initializing RASACode...");
		let fileContent = "This file indicates to the RASACode extension that this folder is a RASA project. Adding it to your .gitignore is recommended."
		
		
		if (workspacePath == null)
		{
			vscode.window.showErrorMessage('Unable to initialize RASACode. Make sure you have a project folder open.');
			return;
		}

		writeFileSync(workspacePath.uri.fsPath + '/.rasacode', fileContent);
	});

	trainingData = {
		"stories": {
			"intents": [], 
			"actions": []
		}, 
		"nlu": {
			"intents": []
		}
	};

	domainData = {
		"intents": [], 
		"actions": [], 
		"responses": []
	};
	
	console.log("Hello World!");
	loadResources();
	context.subscriptions.push(disposable);
}

function loadResources()
{
	const ymlPaths = recursiveRead(workspacePath.uri.fsPath, [".vscode", "node_modules", "env"]);

	ymlPaths.forEach(function(path) 
	{		
		// const ymlContent: any = yamlParse(ymlFile);
		const ymlContent = 
			YAML.parseDocument(
				readFileSync(path, 'utf-8'),
				{ keepCstNodes: true, 
				lineCounter: new LineCounter() }
			)

		let declarationsInThisFile: any = []; 
		
		if (ymlContent)
		{
			const primaryKeysInDocument = Object.values(ymlContent["contents"]["items"]);
			primaryKeysInDocument.forEach(function(primaryKey: any) 
			{
				const primaryKeyName = primaryKey["key"].toString(); 
				
				switch (primaryKeyName)
				{
					case "stories":
						// This file declares stories
						console.log("Here");
						const storyBlocksInThisFile = primaryKey["value"]["items"]
						storyBlocksInThisFile.forEach(function(storyBlock: any) 
						{
							// Most of this stuff is just navigating the CST tree generated by the YAML parser. 
							// Hopefully the variable names make it a bit clearer what's doing what.  
							let stepsInThisBlock = storyBlock["items"][1]["value"]["items"]
							
							stepsInThisBlock.forEach(function(step: any) 
							{
								// TODO
							});

						});
						

					case "nlu": 						
						break; 

					case "rules":
						break; 

					default: 
						break; 
				}

			})
			
			console.log("End");
		}
	});
}

export function deactivate() {}
