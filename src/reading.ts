import { LineCounter } from 'yaml'; 
import { RASADeclarationType } from './definitions';


export function getStoryUsage(data: any, counter: LineCounter, filePath: string) 
{
    // This file declares stories
    let declarationsInThisFile: any = {
        "intents": [], 
        "actions": []
    }; 
    const storyBlocksInThisFile = data["value"]["items"]
    storyBlocksInThisFile.forEach(function (storyBlock: any) {
        // Most of this stuff is just navigating the CST tree generated by the YAML parser. 
        // Hopefully the variable names make it a bit clearer what's doing what.  
        let stepsInThisBlock = storyBlock["items"][1]["value"]["items"]

        stepsInThisBlock.forEach(function (step: any) 
        {
            let stepType = step["items"][0]["key"].toString();
            let stepDeclarationUsed = step["items"][0]["value"].toString();
            let stepStartOffset = step["range"][0];
            let position = getUsablePosition(stepStartOffset, counter);

            if (stepType === "intent") {
                
                let o = {
                    "file": filePath,
                    "position": position,
                    "type": RASADeclarationType.IntentInStory,
                    "length": step["range"][1] - step["range"][0],
                    "declaration": stepDeclarationUsed
                };

                declarationsInThisFile["intents"].push(o);
            }

            if (stepType === "action") {
                let o = {
                    "file": filePath,
                    "position": position,
                    "type": RASADeclarationType.ActionInStory,
                    "length": step["range"][1] - step["range"][0],
                    "declaration": stepDeclarationUsed
                };

                declarationsInThisFile["actions"].push(o);
            }
        });
    }); 

    return declarationsInThisFile;
}


export function getRuleUsage(data: any, counter: LineCounter, filePath: string) 
{
    // This file declares stories
    let declarationsInThisFile: any = {
        "intents": [], 
        "actions": []
    }; 
    const ruleBlocksInThisFile = data["value"]["items"]
    ruleBlocksInThisFile.forEach(function (ruleBlock: any) {
        // Most of this stuff is just navigating the CST tree generated by the YAML parser. 
        // Hopefully the variable names make it a bit clearer what's doing what.  
        let stepsInThisBlock = ruleBlock["items"][1]["value"]["items"]

        stepsInThisBlock.forEach(function (step: any) 
        {
            let stepType = step["items"][0]["key"].toString();
            let stepDeclarationUsed = step["items"][0]["value"].toString();
            let stepStartOffset = step["range"][0];
            let position = getUsablePosition(stepStartOffset, counter);

            if (stepType === "intent") {
                
                let o = {
                    "file": filePath,
                    "position": position,
                    "type": RASADeclarationType.IntentInRule,
                    "length": step["range"][1] - step["range"][0],
                    "declaration": stepDeclarationUsed
                };

                declarationsInThisFile["intents"].push(o);
            }

            if (stepType === "action") {
                let o = {
                    "file": filePath,
                    "position": position,
                    "type": RASADeclarationType.ActionInRule,
                    "length": step["range"][1] - step["range"][0],
                    "declaration": stepDeclarationUsed
                };

                declarationsInThisFile["actions"].push(o);
            }
        });
    }); 

    return declarationsInThisFile;
}


export function getNluUsage(data: any, counter: LineCounter, filePath: string)
{
    let declarationsInThisFile: any[] = []
        
    const nluBlocksInThisFile = data["value"]["items"];
    nluBlocksInThisFile.forEach(function (nluBlock: any) 
    {
        let intentName = nluBlock["items"][0]["value"].toString();
        let stepStartOffset = nluBlock["range"][0];
        let position = getUsablePosition(stepStartOffset, counter);

        let o = {
            "file": filePath,
            "position": position,
            "type": RASADeclarationType.IntentInNLU,
            "length": nluBlock["range"][1] - nluBlock["range"][0],
            "declaration": intentName
        };
        
        declarationsInThisFile.push(o);
    });

    return declarationsInThisFile;
}


export function getIntentDeclarations(data: any, counter: LineCounter, filePath: string) 
{
    // This file declares nlu in domain
    let declarationsInThisFile: any[] = []; 
    const intentsDeclaredInFile = data["value"]["items"];
    
    intentsDeclaredInFile.forEach(function(intent: any) 
    {
        const position = counter.linePos(intent["range"][0]);

        let o = {
            "file": filePath,
            "position": position,
            "type": RASADeclarationType.IntentDeclaration,
            "length": intent["range"][1] - intent["range"][0],
            "declaration": intent["value"].toString()
        };

        declarationsInThisFile.push(o);
    });
    
    return declarationsInThisFile;
}


export function getActionDeclarations(data: any, counter: LineCounter, filePath: string) 
{
    // This file declares actions in domain
    let declarationsInThisFile: any[] = []; 
    const actionsDeclaredInFile = data["value"]["items"];
    
    actionsDeclaredInFile.forEach(function(action: any) 
    {
        const position = counter.linePos(action["range"][0]);

        let o = {
            "file": filePath,
            "position": position,
            "type": RASADeclarationType.ActionDeclaration,
            "length": action["range"][1] - action["range"][0],
            "declaration": action["value"].toString()
        }
        declarationsInThisFile.push(o);
    });
    
    return declarationsInThisFile;
}


export function getResponseDeclarations(data: any, counter: LineCounter, filePath: string) 
{
    // This file declares responses into domain
    let declarationsInThisFile: any[] = []; 
    const responsesDeclaredInFile = data["value"]["items"];

    responsesDeclaredInFile.forEach(function(response: any) 
    {
        let responseName: string = response["key"].toString();
        const position = counter.linePos(response["key"]["range"][0]);

        let o = {
            "file": filePath,
            "position": position,
            "type": RASADeclarationType.ResponseDeclaration,
            "length": response["key"]["range"][1] - response["key"]["range"][0],
            "declaration": responseName
        }
        declarationsInThisFile.push(o);
    });


    return declarationsInThisFile;
}

function getUsablePosition(stepStartOffset: number, counter: LineCounter)
{
    let position = counter.linePos(stepStartOffset); 
    position["col"]--; 
    position["line"]--;

    return position
}